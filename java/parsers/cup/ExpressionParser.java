
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parsers.cup;

import parsers.ast.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ExpressionParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ExpressionParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ExpressionParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ExpressionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\012\000\002\004\003\000\002\004\003" +
    "\000\002\006\002\000\002\006\003\000\002\007\003\000" +
    "\002\007\005\000\002\005\004\000\002\015\002\000\002" +
    "\015\005\000\002\014\006\000\002\014\005\000\002\014" +
    "\004\000\002\014\015\000\002\014\003\000\002\014\002" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\013\006\000\002\011\002" +
    "\000\002\011\003\000\002\012\003\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\014\010\015\006\001\002\000\004\006" +
    "\013\001\002\000\010\002\001\014\001\015\001\001\002" +
    "\000\004\006\ufffc\001\002\000\010\002\012\014\010\015" +
    "\006\001\002\000\004\006\ufffd\001\002\000\010\002\uffff" +
    "\014\uffff\015\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\012\014\001\002\000\010\013\ufffb\014\010\015\006" +
    "\001\002\000\004\013\024\001\002\000\004\006\023\001" +
    "\002\000\006\013\ufff9\020\021\001\002\000\004\013\ufffa" +
    "\001\002\000\006\014\010\015\006\001\002\000\004\013" +
    "\ufff8\001\002\000\006\013\ufff7\020\ufff7\001\002\000\004" +
    "\016\025\001\002\000\026\004\030\005\031\006\036\012" +
    "\040\014\010\015\006\017\ufff6\021\uffef\023\037\024\034" +
    "\001\002\000\004\006\105\001\002\000\020\007\uffe7\010" +
    "\uffe7\011\uffe7\013\uffe7\017\uffe7\020\uffe7\021\uffe7\001\002" +
    "\000\020\007\uffea\010\uffea\011\uffea\013\uffea\017\uffea\020" +
    "\uffea\021\uffea\001\002\000\020\007\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\017\uffe9\020\uffe9\021\uffe9\001\002\000\014\007" +
    "\053\010\051\011\052\017\ufff0\021\ufff0\001\002\000\004" +
    "\017\104\001\002\000\004\012\072\001\002\000\004\021" +
    "\070\001\002\000\020\007\uffe8\010\uffe8\011\uffe8\012\044" +
    "\017\uffe8\021\uffe8\022\066\001\002\000\012\004\030\005" +
    "\031\006\043\012\040\001\002\000\014\003\041\004\030" +
    "\005\031\006\043\012\040\001\002\000\004\013\064\001" +
    "\002\000\012\007\053\010\051\011\052\013\063\001\002" +
    "\000\022\007\uffe8\010\uffe8\011\uffe8\012\044\013\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\001\002\000\014\004\030\005\031" +
    "\006\043\012\040\013\uffe2\001\002\000\004\013\062\001" +
    "\002\000\004\013\uffe1\001\002\000\014\007\053\010\051" +
    "\011\052\013\uffe0\020\050\001\002\000\012\004\030\005" +
    "\031\006\043\012\040\001\002\000\014\003\057\004\030" +
    "\005\031\006\043\012\040\001\002\000\012\004\030\005" +
    "\031\006\043\012\040\001\002\000\014\003\054\004\030" +
    "\005\031\006\043\012\040\001\002\000\020\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\017\uffe6\020\uffe6\021\uffe6\001\002" +
    "\000\020\007\uffed\010\051\011\052\013\uffed\017\uffed\020" +
    "\uffed\021\uffed\001\002\000\020\007\uffeb\010\uffeb\011\052" +
    "\013\uffeb\017\uffeb\020\uffeb\021\uffeb\001\002\000\020\007" +
    "\uffe5\010\uffe5\011\uffe5\013\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\001\002\000\020\007\uffec\010\uffec\011\052\013\uffec\017" +
    "\uffec\020\uffec\021\uffec\001\002\000\004\013\uffdf\001\002" +
    "\000\020\007\uffe3\010\uffe3\011\uffe3\013\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\001\002\000\020\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\017\uffee\020\uffee\021\uffee\001\002\000\020\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\001\002\000\014\007\053\010\051\011\052\017\ufff2\021" +
    "\ufff2\001\002\000\012\004\030\005\031\006\043\012\040" +
    "\001\002\000\014\007\053\010\051\011\052\017\ufff3\021" +
    "\ufff3\001\002\000\026\004\030\005\031\006\036\012\040" +
    "\014\010\015\006\017\ufff6\021\uffef\023\037\024\034\001" +
    "\002\000\004\017\ufff5\001\002\000\012\004\030\005\031" +
    "\006\043\012\040\001\002\000\012\007\053\010\051\011" +
    "\052\013\074\001\002\000\004\016\075\001\002\000\024" +
    "\004\030\005\031\006\036\012\040\014\010\015\006\017" +
    "\uffef\023\037\024\034\001\002\000\004\017\077\001\002" +
    "\000\004\025\100\001\002\000\004\016\101\001\002\000" +
    "\024\004\030\005\031\006\036\012\040\014\010\015\006" +
    "\017\uffef\023\037\024\034\001\002\000\004\017\103\001" +
    "\002\000\006\017\ufff1\021\ufff1\001\002\000\010\002\ufffe" +
    "\014\ufffe\015\ufffe\001\002\000\004\022\106\001\002\000" +
    "\012\004\030\005\031\006\043\012\040\001\002\000\014" +
    "\007\053\010\051\011\052\017\ufff4\021\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\010\002\006\003\004\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\004\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\015" +
    "\005\016\006\014\007\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\015\005\016\007\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\025\010\031" +
    "\013\026\014\034\015\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\064\013\026\001\001" +
    "\000\006\010\041\013\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\046\011\044" +
    "\012\045\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\046\012\060\013\026" +
    "\001\001\000\006\010\057\013\026\001\001\000\006\010" +
    "\055\013\026\001\001\000\006\010\054\013\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\066\013\026\001\001\000\002\001\001" +
    "\000\014\004\025\010\031\013\026\014\034\015\070\001" +
    "\001\000\002\001\001\000\006\010\072\013\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\025\010" +
    "\031\013\026\014\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\025\010\031\013" +
    "\026\014\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\106\013" +
    "\026\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExpressionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExpressionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExpressionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ExpressionParser$actions {
  private final ExpressionParser parser;

  /** Constructor */
  CUP$ExpressionParser$actions(ExpressionParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ExpressionParser$do_action_part00000000(
    int                        CUP$ExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$ExpressionParser$parser,
    java.util.Stack            CUP$ExpressionParser$stack,
    int                        CUP$ExpressionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExpressionParser$result;

      /* select the action based on the action number */
      switch (CUP$ExpressionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CompUnit ::= FuncDecl 
            {
              CompUnit RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		FunctionDeclaration value = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new CompUnit(); RESULT.functions.add(value); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("CompUnit",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CompUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		CompUnit start_val = (CompUnit)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		RESULT = start_val;
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExpressionParser$parser.done_parsing();
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CompUnit ::= CompUnit FuncDecl 
            {
              CompUnit RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		CompUnit functions = (CompUnit)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int functionleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		FunctionDeclaration function = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		
                functions.functions.add(function);
                RESULT = functions;
             
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("CompUnit",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncDecl ::= Type IDENTIFIER LPAREN ArgList RPAREN LBRACE Statements RBRACE 
            {
              FunctionDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-7)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-6)).value;
		int argListleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)).right;
		ArrayList<Arg> argList = (ArrayList<Arg>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		 RESULT = new FunctionDeclaration(type, name, argList, statements); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-7)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ArgList ::= 
            {
              ArrayList<Arg> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("ArgList",4, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ArgList ::= NonemptyArgList 
            {
              ArrayList<Arg> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		ArrayList<Arg> value = (ArrayList<Arg>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = value; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("ArgList",4, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NonemptyArgList ::= Arg 
            {
              ArrayList<Arg> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Arg arg = (Arg)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(arg); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("NonemptyArgList",5, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NonemptyArgList ::= Arg COMMA NonemptyArgList 
            {
              ArrayList<Arg> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Arg arg = (Arg)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		ArrayList<Arg> list = (ArrayList<Arg>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 list.add(0,arg); RESULT = list; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("NonemptyArgList",5, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Arg ::= Type IDENTIFIER 
            {
              Arg RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new Arg(type, name); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Arg",3, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statements",11, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= Statement SEMI Statements 
            {
              ArrayList<Statement> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 statements.add(0,statement); RESULT = statements; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statements",11, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= Type IDENTIFIER EQ Exp 
            {
              Statement RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(type, name, exp); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= IDENTIFIER EQ Exp 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new Assignment(name,exp); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= RETURN Exp 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new ReturnStatement(exp); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= IF LPAREN Exp RPAREN LBRACE Statement RBRACE ELSE LBRACE Statement RBRACE 
            {
              Statement RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-8)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-8)).value;
		int positiveleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-5)).left;
		int positiveright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-5)).right;
		Statement positive = (Statement)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-5)).value;
		int negativeleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int negativeright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Statement negative = (Statement)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		 RESULT = new IfElseStatement(condition, positive, negative); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-10)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= Exp 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= 
            {
              Statement RESULT =null;

              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= LPAREN Exp RPAREN 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		 RESULT = value; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= Exp PLUS Exp 
            {
              Expression RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression value1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression value2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BinaryExpression(value1, BinaryExpression.Operator.PLUS, value2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp STAR Exp 
            {
              Expression RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression value1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression value2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BinaryExpression(value1, BinaryExpression.Operator.STAR, value2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= Exp POW Exp 
            {
              Expression RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression value1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression value2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BinaryExpression(value1, BinaryExpression.Operator.POW, value2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= NUMBER 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NumberExpression(value); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= BOOLEAN 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BooleanExpression(value); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new VariableExpression(name); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= FunctionCall 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		FunctionCall value = (FunctionCall)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = value; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp PLUS error 
            {
              Expression RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		 RESULT = v1; System.err.println("Hibás karakter a bemeneti fájlban, '+' karaktert követően!");
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp STAR error 
            {
              Expression RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		 RESULT = v1; System.err.println("Hibás karakter a bemeneti fájlban, '*' karaktert követően!");
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= LPAREN error RPAREN 
            {
              Expression RESULT =null;
		  RESULT = new NumberExpression(0); System.err.println("Hibás karakter a bemeneti fájlban, '(...)' karakterek között!");
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("Exp",6, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FunctionCall ::= IDENTIFIER LPAREN ParamList RPAREN 
            {
              FunctionCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		ArrayList<Expression> paramList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		 RESULT = new FunctionCall(name, paramList); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",9, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamList ::= 
            {
              ArrayList<Expression> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("ParamList",7, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParamList ::= NonemptyParamList 
            {
              ArrayList<Expression> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		ArrayList<Expression> paramList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = paramList; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("ParamList",7, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NonemptyParamList ::= Exp 
            {
              ArrayList<Expression> RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(expression); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("NonemptyParamList",8, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NonemptyParamList ::= Exp COMMA NonemptyParamList 
            {
              ArrayList<Expression> RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		ArrayList<Expression> paramList = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = paramList; RESULT.add(0,expression); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("NonemptyParamList",8, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ExpressionParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ExpressionParser$do_action(
    int                        CUP$ExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$ExpressionParser$parser,
    java.util.Stack            CUP$ExpressionParser$stack,
    int                        CUP$ExpressionParser$top)
    throws java.lang.Exception
    {
              return CUP$ExpressionParser$do_action_part00000000(
                               CUP$ExpressionParser$act_num,
                               CUP$ExpressionParser$parser,
                               CUP$ExpressionParser$stack,
                               CUP$ExpressionParser$top);
    }
}

}
